#  docker-compose.yml
version: '3.8'

services:
  my-sql:
    image: mysql:8.0
    container_name: mysql
    environment:
      MYSQL_DATABASE: users_microservice_db
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
    ports:
      - "3306:3306"
    volumes:
      - mysqldata:/var/lib/mysql
    networks:
      - my-network

  eureka-server:
    build:
      context: ./eureka-server-dame
    image: eureka-server-image
    container_name: eureka-server
    ports:
      - "8761:8761"
    environment:
      SPRING_APPLICATION_NAME: eureka-server-dame
      EUREKA_CLIENT_REGISTER_WITH_EUREKA: "false"
      EUREKA_CLIENT_FETCH_REGISTRY: "false"
    networks:
      - my-network

  users-microservice:
    build:
      context: ./users-microservice
    image: users-microservice-image
    container_name: users-microservice
    depends_on:
      - my-sql
      - eureka-server
    environment:
      SPRING_DATASOURCE_URL: jdbc:mysql://my-sql:3306/users_microservice_db
      SPRING_DATASOURCE_USERNAME: ${SPRING_DATASOURCE_USERNAME}
      SPRING_DATASOURCE_PASSWORD: ${SPRING_DATASOURCE_PASSWORD}
      EUREKA_SERVER_HOST: eureka-server
    ports:
      - "8082:8082"
    networks:
      - my-network

  tasks-microservice:
    build:
      context: ./tasks-microservice
    image: tasks-microservice-image
    container_name: tasks-microservice
    depends_on:
      - my-sql
      - eureka-server
    environment:
      SPRING_DATASOURCE_URL: jdbc:mysql://my-sql:3306/users_microservice_db
      SPRING_DATASOURCE_USERNAME: ${SPRING_DATASOURCE_USERNAME}
      SPRING_DATASOURCE_PASSWORD: ${SPRING_DATASOURCE_PASSWORD}
      EUREKA_SERVER_HOST: eureka-server
    ports:
      - "8081:8081"
    networks:
      - my-network

  api-gateway:
    build:
      context: ./api-gateway
    image: api-gateway-image
    container_name: api-gateway
    depends_on:
      - eureka-server
      - users-microservice
      - tasks-microservice
    ports:
      - "8080:8080"
    environment:
      EUREKA_SERVER_HOST: eureka-server
    networks:
      - my-network

  prometheus:
    image: prom/prometheus
    container_name: prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./docker/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    networks:
      - my-network

  tempo:
    image: grafana/tempo
    container_name: tempo
    ports:
      - "3200:3200"
    volumes:
      - ./docker/tempo/tempo.yml:/etc/tempo.yaml:ro
      - ./docker/tempo/tempo-data:/tmp/tempo
    networks:
      - my-network

  zipkin:
    image: openzipkin/zipkin
    container_name: zipkin
    ports:
      - "9411:9411"
    networks:
      - my-network

  loki:
    image: grafana/loki:main
    container_name: loki
    command: [ "-config.file=/etc/loki/local-config.yaml" ]
    ports:
      - "3100:3100"

  grafana:
    image: grafana/grafana
    container_name: grafana
    ports:
      - "3000:3000"
    volumes:
      - ./docker/grafana:/etc/grafana/provisioning/datasources:ro
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=password
    networks:
      - my-network


volumes:
  mysqldata:
  tempo-data:

networks:
  my-network:
    driver: bridge

